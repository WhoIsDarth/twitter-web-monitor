pipelines:
  pull-requests:
    '**':
      - step:
          name: Build and Test
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build
  custom:
    auth-service:
      - step:
          name: Build Auth Service
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p auth-service
          artifacts:
            - auth-service/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd auth-service
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $AUTH_SERVICE_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $AUTH_SERVICE_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $AUTH_SERVICE_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'auth-service'
                FORCE_NEW_DEPLOYMENT: 'true'
    web-broadcast-service:
      - step:
          name: Build Web Broadcast Service
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p web-broadcast-service
          artifacts:
            - web-broadcast-service/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd web-broadcast-service
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $WEB_BROADCAST_SERVICE_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $WEB_BROADCAST_SERVICE_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $WEB_BROADCAST_SERVICE_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'web-broadcast-service'
                FORCE_NEW_DEPLOYMENT: 'true'
    discord-broadcast-service:
      - step:
          name: Build Discord Broadcast Service
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p discord-broadcast-service
          artifacts:
            - discord-broadcast-service/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd discord-broadcast-service
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $DISCORD_BROADCAST_SERVICE_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $DISCORD_BROADCAST_SERVICE_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $DISCORD_BROADCAST_SERVICE_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'discord-broadcast-service'
                FORCE_NEW_DEPLOYMENT: 'true'
    dictionary-service:
      - step:
          name: Build Dictionary Service
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p dictionary-service
          artifacts:
            - dictionary-service/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd dictionary-service
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $DICTIONARY_SERVICE_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $DICTIONARY_SERVICE_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $DICTIONARY_SERVICE_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'dictionary-service'
                FORCE_NEW_DEPLOYMENT: 'true'
    details-service:
      - step:
          name: Build Dictionary Service
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p details-service
          artifacts:
            - details-service/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd details-service
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $DETAILS_SERVICE_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $DETAILS_SERVICE_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $DETAILS_SERVICE_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'details-service'
                FORCE_NEW_DEPLOYMENT: 'true'
    staff-manager-bot:
      - step:
          name: Build Staff Manager Bot
          image: gradle:7.1-jdk11
          caches:
            - gradle
          script:
            - gradle clean build -p staff-manager-bot
          artifacts:
            - staff-manager-bot/build/libs/*
      - step:
          name: Push Docker Image
          image: atlassian/pipelines-awscli
          services:
            - docker
          caches:
            - docker
          script:
            - cd staff-manager-bot
            - echo $(ls build/libs)
            # Login to docker registry on AWS
            - eval $(aws ecr get-login --no-include-email)
            # Build image
            - docker build -t $STAFF_MANAGER_DOCKER_IMAGE_URL:$BITBUCKET_BUILD_NUMBER -t $STAFF_MANAGER_DOCKER_IMAGE_URL:latest .
            # Push image to private registry
            - docker push $STAFF_MANAGER_DOCKER_IMAGE_URL
      - step:
          name: Deploy to AWS
          trigger: manual
          script:
            - pipe: atlassian/aws-ecs-deploy:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                CLUSTER_NAME: 'web-monitor'
                SERVICE_NAME: 'staff-manager'
                FORCE_NEW_DEPLOYMENT: 'true'
